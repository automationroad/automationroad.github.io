<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Redis开发与运维]]></title>
    <url>%2F2018%2F09%2F06%2Fredis-develop-operation%2F</url>
    <content type="text"><![CDATA[第1章 初识Redis1.2 Redis特性1.速度快Redis执行命令速度快，官方给出的数字是读写性能达到10万/秒，原因归纳为以下四点： Redis的数据运行在内存中，这是速度快的最主要原因 Redis采用C语言开发，C语言距离操作系统近，执行速度快 Redis使用单线程架构，避免多线程可能产生的竞争问题 开发者开发的Redis代码质量高 2.基于键值对的数据结构服务器主要提供5种数据结构：字符串、哈希、列表、集合、有序集合 字符串基础上的演变增加：位图（Bitmaps）、HyperLogLog、GEO 3.丰富的功能提供 键过期 功能，可以用来实现缓存。 提供 发布订阅 功能，可以用来实现消息系统。 支持 Lua 脚本 功能，利用 Lua 创造新的Redis命令 提供 简单的事务 功能，一定程度上保证事务特性 提供 流水线（Pipeline）功能，客户端能将一批命令一次性传到Redis，减少网络开销 4.简单稳定源代码少 多线程模型 不依赖操作系统的类库，自己实现事件处理的相关功能 5.客户端语言多提供TCP通信协议，很多主流语言支持 6.持久化RDB和AOF 两种方式 7.主从复制复制功能提供多个相同功能的副本，是分布式的基础 8.高可用和分布式Redis从2.8以后推出Redis Sentinel，3.0推出Redis Cluster 1.3.1 Redis使用场景1.缓存2.排行榜系统3.计数器应用4.社交网络5.消息队列系统1.3.2 Redis不可以做什么数据规模角度看：大规模数据和小规模数据 数据冷热角度看：热数据和冷数据 1.4 用好Redis的建议1.切勿当作黑盒使用，开发与运维同样重要2.阅读源码1.5 正确安装并启动Redis1.5.1 安装RedisLinux上安装 wget http://download.redis.io/releases/redis-3.0.7.tar.gztar xzf redis-3.0.7.tar.gzln -s redis-3.0.7 rediscd redismakemake install 在windows上安装 微软开源组织维护的分支：https://github.com/MicrosoftArchive/redis 1.5.2 配置、启动、操作、关闭Redis 1.启动Redis（1）默认配置：直接启动无法自定义配置文件，生产环境用不上 例：redis-server （2）运行配置：自定义部分配置，当需要较多自定义时，不建议使用 例：redis-server –port 6380 （3）配置文件启动：将自定义配置写到文件里，指定启动，生产使用 例：redis-server /usr/local/redis/redis.conf 2.Redis命令行客户端第一种是交互方式：redis-cli -h {host_ip} -p {host_port} 例：redis-cli -h 127.0.0.1 -p 6379 第二种命令模式：redis-cli {host_ip} -p {host_port} {commond} 例：redis-cli -h 127.0.0.1 -p 6379 get hello 说明： -h 和 -p 参数如果没有指定的话，使用默认参数，即 127.0.0.1 和 6379 3.停止Redis服务redis-cli shutdown 注意： （1）redis关闭过程中，断开与客户端连接、持久化文件生成，是正常关闭操作 （2）除了shutdown之外还可以使用kill命令关闭，但不要使用 kill -9 强制关闭，强制关闭可能会造成 不会做持久化操作，缓存区资源未释放，AOF和复制丢失数据的情况 （3）shutdown还有一个参数，是否在关闭前生成持久化文件 redis-cli shutdown nosave | save 默认生成，即 save 1.6 Redis重大版本借鉴Linux操作系统命名规则，版本号第二位，如果是奇数，则为非稳定版（开发版，例2.5,2.7,2.9），如果是偶数，则为稳定版（例2.4,2.6,2.8） 第2章 API的理解和使用2.1.1 预备1.查看所有键keys , keys 会将所有的键输出，遍历所有键，时间复杂度是 O(n) 2.键总数dbsize ，dbsize 会返回所有的键总数，不会遍历所有键，直接获取redis内置的键总数变量，时间复杂度是O(0) 3.检查键是否存在exists key 存在返回1，不存在返回0 4.删除键del key 返回结果为成功删除的键个数，返回0代表执行失败（键不存在） 5.键过期expire key seconds ttl 命令：查询键过期时间，有3个返回值， 大于等于0，键剩余的过期时间 -1：键没设置过期时间 -2：键不存在 6.键的数据结构类型type key 返回键的数据类型，不存在返回none 2.1.2 数据结构和内部编码type 命令返回当前键的数据结构类型，分别是 string（字符串）、hash（哈希）、list（列表）、set（集合）、zset（有序集合），每种数据结构内部都有自己的底层的内部编码实现，而且是多种实现，Redis会在合适的场景选择合适的内部编码，object encoding 命令查询内部编码 2.1.3 单线程架构]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>redis</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[记一次Linux下提取MySQL日志关键字段]]></title>
    <url>%2F2018%2F08%2F31%2Fpick-mysql-log%2F</url>
    <content type="text"><![CDATA[环境说明操作系统：centos7 sed版本：4.2.2 egrep版本：2.20 paste版本：8.22 提取要求一次同事说，需要提取MySQL日志的关键字段，叫我帮忙，每一行一定包含4个或者7个字段，下面是字段例子 IP（特殊处理为内网IP）：192.168.1.1 时间：2018-07-07 19:10:18 文件绝对路径：/home/hms/data/c/rec_pub_73_c/TVOD/88888905/224/3221229835/10000100000000060000000009130764_0.smil.20180707191000.ts 丢包时间：1.659539 上次丢包时间（不一定有）：1530961817.271825 当前丢包时间（不一定有）：1530961818.935411 码率（不一定有）：2540.155518 如上展示，每一行一定会包含4个字段，至于后面3个只能都是有或者都没有 思路1.删除多余字段，直接得到4个或者7个字段，表达式太过复杂 2.直接过滤出7个想要的字段，因为7个字段不是每一行都出来，基本上不可能实现（至少我想不到怎么写） 3.重组文件，把想要的字段筛选出来，文件合并，按照字段顺序重组文件（待会使用这个思路） 日志样板点击显/隐内容 192.168.1.1 2018-07-07 19:10:18:935 C06B688SPC013 ts_record.c:11105 code:2 thread:11349 ts_packet_check: Warning: Stream /home/hms/data/c/rec_pub_73_c/TVOD/88888905/224/3221229835/10000100000000060000000009130764_0.smil.20180707191000.ts curr_lose_pkg_time 1.659539 sec,time 1530961817.271825 -&gt; 1530961818.935411 second_rate 2540.155518.192.168.1.1 2018-07-07 19:15:00:056 C06B688SPC013 ts_record.c:11600 code:2 thread:11349 ts_packet_set_status: /home/hms/data/c/rec_pub_73_c/TVOD/88888905/224/3221229835/10000100000000060000000009130764_0.smil.20180707191000.ts record successfully with total_lose_pkg_time 1.659539 sec.192.168.1.1 2018-07-07 04:59:25:848 C06B688SPC013 ts_record.c:11105 code:2 thread:21051 ts_packet_check: Warning: Stream /home/hms/data/c/rec_pub_68_dgcp2_c/TVOD/88888888/224/3221229808/10000100000000060000000009083746_0.smil.20180707045500.ts curr_lose_pkg_time 1.920283 sec,time 1530910763.925132 -&gt; 1530910765.848897 second_rate 2952.463135.192.168.1.1 2018-07-07 05:00:00:067 C06B688SPC013 ts_record.c:11600 code:2 thread:21051 ts_packet_set_status: /home/hms/data/c/rec_pub_68_dgcp2_c/TVOD/88888888/224/3221229808/10000100000000060000000009083746_0.smil.20180707045500.ts record successfully with total_lose_pkg_time 1.920283 sec. 这里展示部分日志样板，完整的日志文件请点击链接查看，https://github.com/automationroad/common_script/blob/master/file/hms_log_20180707.log ，建议下载下来操作一遍 提取字段方法1、得到 IP 时间cat hms_log_20180707.log| egrep -o “([0-9]{1,3}.){3}[0-9]{1,3}[[:space:]][0-9]{4}(-[0-9]{2}){2}[[:space:]][0-9]{2}(:[0-9]{2}){2}” 2、得到 文件绝对路径cat hms_log_20180707.log | egrep -o “/home.*.ts” 3、得到 丢包时间cat hms_log_20180707.log | egrep -o “[[:space:]][0-9]{1,3}.[0-9]{6,7}[[:space:]]sec” | egrep -o “[0-9]{1,3}.[0-9]{6,7}” 4、获取 上次丢包时间、当前丢包时间、码率（不一定有）cat hms_log_20180707.log | egrep -o “sec.*” | sed “s/ -&gt;//g” | sed “s/ second_rate//g” | sed “s/.$//g” | sed ‘s/sec,time //g’ | sed ‘s/sec//g’ 这里注意一个是，这三个字段不一定有，当不存在时，匹配不到需要保留空白行 提取过程1、得到 IP 时间cat hms_log_20180707.log | egrep -o “([0-9]{1,3}.){3}[0-9]{1,3}[[:space:]][0-9]{4}(-[0-9]{2}){2}[[:space:]][0-9]{2}(:[0-9]{2}){2}” &gt; hms_log_20180707.log_1 2、得到 文件绝对路径cat hms_log_20180707.log | egrep -o “/home.*.ts” &gt; hms_log_20180707.log_2 3、得到 丢包时间cat hms_log_20180707.log | egrep -o “[[:space:]][0-9]{1,3}.[0-9]{6,7}[[:space:]]sec” | egrep -o “[0-9]{1,3}.[0-9]{6,7}” &gt; hms_log_20180707.log_3 4、获取 上次丢包时间、当前丢包时间、码率（不一定有）cat hms_log_20180707.log | egrep -o “sec.*” | sed “s/ -&gt;//g” | sed “s/ second_rate//g” | sed “s/.$//g” | sed ‘s/sec,time //g’ | sed ‘s/sec//g’ &gt; hms_log_20180707.log_4 合成包含4或7个字段的文件paste -d” “ hms_log_20180707.log_1 hms_log_20180707.log_2 hms_log_20180707.log_3 hms_log_20180707.log_4 | sed “s/ $//g” &gt; hms_log_20180707.log_5]]></content>
      <categories>
        <category>shell系列</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos7下安装zabbix3.4.12服务端和客户端]]></title>
    <url>%2F2018%2F08%2F26%2Fzabbix3-4deploy%2F</url>
    <content type="text"><![CDATA[环境说明操作系统：centos7 数据库：MySQL5.7 zabbix版本：3.4.12 zabbix-server IP ：192.168.181.129 zabbix-agent IP：192.168.181.130 安装前注意 SELinux和防火墙检查1234567#临时关闭selinuxsetenforce 0#永久关闭selinuxsed -i "s/SELINUX=enforcing/SELINUX=disabled/g" /etc/selinux/config#关闭防火墙和开机不启动（生产环境慎用，可以选择开放对应的端口）systemctl stop firewalld.servicesystemctl disable firewalld.service 安装MySQL5.712345678910111213141516#引入mysql源wget https://dev.mysql.com/get/mysql80-community-release-el7-1.noarch.rpm#安装mysql源rpm -ivh mysql80-community-release-el7-1.noarch.rpm#源包管理工具yum -y install yum-utils#关闭默认安装的mysql8yum-config-manager --disable mysql80-community#启用安装mysql5.7yum-config-manager --enable mysql57-community#安装mysql5.7yum install mysql-community-server -y#启动mysql5.7systemctl start mysqld.service#查看临时密码grep 'temporary password' /var/log/mysqld.log | awk -F '[:]' '&#123;print $4&#125;' | sed 's/ //g' 临时密码如上图，每个人的密码不一样，这里展示我的密码 , esStON8wPp** 1234567891011#设置新的密码（修改临时密码）#进入mysql交互工具mysql -u root -p#输入密码 esStON8wPp**#修改临时密码，这里我设置为 MyNewPass4@ ，接下来我几个步骤会用到ALTER USER 'root'@'localhost' IDENTIFIED BY 'MyNewPass4@';#设置用户 root 只可以在本地被访问grant all privileges on *.* to root@"localhost" identified by "MyNewPass4@";#刷新，之后退出交互flush privileges; 整个修改过程如下图 安装zabbix3.4安装zabbix服务端12345678910111213141516171819202122#引入zabbix源rpm -ivh https://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpm#安装zabbix服务端,因为本机也需要监控，所以这里把客户端也安装yum -y install zabbix-server-mysql zabbix-web-mysql zabbix-agent zabbix-get#创建数据库zabbix及其用户mysql -uroot -p'MyNewPass4@' -e 'create database zabbix character set utf8 collate utf8_bin;'#授权mysql -uroot -p'MyNewPass4@' -e 'grant all privileges on zabbix.* to zabbix@localhost identified by "Zabbix1@";'#导入zabbix需要的库和表zcat /usr/share/doc/zabbix-server-mysql-*/create.sql.gz | mysql -uzabbix -p'Zabbix1@' zabbix#配置zabbixserver连接mysqlsed -i.ori '126a DBPassword=Zabbix1@' /etc/zabbix/zabbix_server.conf#添加时区sed -i.ori '19a php_value date.timezone Asia/Shanghai' /etc/httpd/conf.d/zabbix.conf#解决图形列表下中文乱码yum -y install wqy-microhei-fontsmv /usr/share/fonts/dejavu/DejaVuSans.ttf /usr/share/fonts/dejavu/DejaVuSans.ttf.bakcp -f /usr/share/fonts/wqy-microhei/wqy-microhei.ttc /usr/share/fonts/dejavu/DejaVuSans.ttf#启动服务zabbixserver和httpsystemctl start zabbix-server httpd#设置开机启动systemctl enable zabbix-server httpd 浏览器访问服务安装进行到这里，已经可以在浏览器访问了，访问方法：http://serverip/zabbix ，这里我使用的是虚拟机，IP是 192.168.181.129，所以输入 http://192.168.181.129/zabbix 即可访问，如下图 点击安装Next step ，这里展示了相关依赖安装的信息，可以看到PHP已经在安装zabbix服务端时安装好了 继续点击Next step ，这里设置连接MySQL，如下图 继续点击Next step，设置平台名字，如下图 继续点击Next step，如下图，最终信息汇总 继续点击Next step，如下图， 点击Finish，进入登录，如下图 登录后界面展示 设置语言为中文 查看主机配置 zabbix客户端部署 关于客户端部署，这里简单说一下，正常来说，zabbix服务端也是需要监控的，这样来说的话，服务端本身也充当了客户端角色，当然只有一台机器有两种身份，所以对于服务端本身的客户端配置可以有两种写法，一种是127.0.0.1的，另一种角色主机IP的，即 hostname 命令返回的IP，因为DNS解析的原因（具体可以去看看DNS服务器相关内容），这里本机就用127.0.0.1 作为配置，其他的被监控端只能使用 hostname 命令返回的IP。 以上这段话纯属个人理解，之所以没有写官网理论，是因为我记不住哈哈，干脆写自己理解好，如果你觉得理解不来，那就去官网的定义，如果认为我的理解存在问题，欢迎QQ联系指教（菜单栏关于有联系方式） 本机客户端部署12345678#前面安装服务端时已经安装了客户端，这里直接修改配置文件#下面的两个修改语句，可以不执行，默认就是 127.0.0.1sed -i '97c Server=127.0.0.1' /etc/zabbix/zabbix_agentd.confsed -i '138c ServerActive=127.0.0.1' /etc/zabbix/zabbix_agentd.conf#这里的 Hostname 填 主机名 和 127.0.0.1 都可以sed -i '149c Hostname=zabbix-server' /etc/zabbix/zabbix_agentd.confsystemctl start zabbix-agent.servicesystemctl enable zabbix-agent.service 前面两个sed作用，指定服务端IP，Server 是被动，ServerActive 是主动，关于主动和被动的理解，我现在是这样看的，zabbix-server 和 zabbix-agent 之间需要建立数据通信，那么就涉及两个关于数据发送的问题，第一个问题是 zabbix-server 主动去客户端获取数据，这种模式在大规模监控中会极大增加服务端的压力（没有用代理zabbix-proxy模式下）；第二个问题是 zabbix-agent 主动发送数据到 zabbix-server ，这种模式常用生产环境，对 zabbix-server 影响小，以上纯属个人理解，如有错误，欢迎指教 浏览器查看添加的客户端 这里可以修改名称，点击zabbix server，如下图 非本机客户端部署12345678910#安装与服务端相同zabbix源rpm -ivh https://repo.zabbix.com/zabbix/3.4/rhel/7/x86_64/zabbix-release-3.4-2.el7.noarch.rpmyum -y install zabbix-agent zabbix-get#客户端配置sed -i '97c Server=192.168.181.129' /etc/zabbix/zabbix_agentd.confsed -i '138c ServerActive=192.168.181.129' /etc/zabbix/zabbix_agentd.conf#非本机客户端填 Hostname 和 服务端IP 都可以sed -i '149c Hostname=zabbix-server' /etc/zabbix/zabbix_agentd.confsystemctl start zabbix-agent.servicesystemctl enable zabbix-agent.service 添加新的主机配置 &gt;&gt; 主机 &gt;&gt; 创建主机，如下图 主机栏配置 添加模板，选择 Template OS Linux ，先点 选择 添加，再点 添加 添加完以后，稍等一下刷新，效果如下图 总结 总的来说，使用yum安装会自行很多相关依赖的，省去很多步骤，这里的环境是centos7，如果是centos6的环境，修改相应的的启动和开机启动命令即可，喜欢挑战的朋友如果要纯编译安装，中间可能会遇到点问题，但是安装完之后理解会更深，我这里分享一份我以前纯编译安装zabbix的，centos6下安装zabbix3.4.2，数据库是MySQL5.6的，地址是 https://github.com/automationroad/common_script 里面的 deploy_process文件夹下的centos6_install_zabbix3.4.2_with_mysql5.6.sh ，这个项目是我持续更新的一个脚本项目，主要分享工作中使用到的一些实用脚本，喜欢的朋友给个star谢谢。 zabbix的安装部署，以及简单的添加到这里就结束了，总的来说简单，至于更进阶的使用，理论看过，还没时间实践，由于个人时间安排，目前没有时间实践，以后会继续更新zabbix系列的，另外，文中的个人观点，如有错误，欢迎指正，QQ联系我谢谢。]]></content>
      <categories>
        <category>zabbix系列</category>
      </categories>
      <tags>
        <tag>监控</tag>
        <tag>自动化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客之路]]></title>
    <url>%2F2018%2F08%2F21%2F%E5%8D%9A%E5%AE%A2%E4%B9%8B%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[我的故事 最近感触许多，找到方向就像觉醒了的感觉，简单说一下我的事，我是去年毕业，实习工作是Java爬虫，转正后，当时的运维走了，上面看我实习期表现不错，让我接手运维工作，回想起来，当初是从零开始的，命令是复制粘贴的，当时为了工作网上看资料，开始接触Linux，第一个看完的教程是菜鸟教程的Linux，看完感觉不够全面，于是自己网上找了鸟哥私房菜的基础篇和服务器篇，当时没有什么决心学习，而且这两本书都是1000+页的书，第一本花了大概3个月看完，看完有兴趣了第二本书1个月就看完了（天天看，早上，上班，下班，车上），当时感觉对Linux算是有个基本的认识了，想过考红帽认证，但是网上看看别人评价，作用不是很大，而且花很多精力，就没有去考了。 迷茫期 当我看完鸟哥的书，了解的东西多了之后，认识到越来越多自己不会的了，Linux运维也有几个方向，对于方向的选择没有概念，不知道自己想要哪一个，所以从18年1月到7月之前的6个月是迷茫的，当时马上过年了，过年跟年后发生了一些事，我沉沦了几个月，直到我下定决定，想清楚很多事，我一直有个习惯，微信关注了很多Linux相关的公众号，每天都会刷新闻，了解最新的新闻，技术等等，所以最后决定的方向是 Linux自动化 方向，至于为什么选择这个，用现在的感觉来说，我首先喜欢研究新技术，最近接触自动化，devops，Aiops的信息比较多，也确实对这方面感兴趣，比较符合现在的情况，我第一份工作和现在的工作服务器规模都是小规模，所以对大型维护没有经验，所以高并发这些只知道一些理论，而且没那个环境，理论也很快忘记了，现在去的第二家公司，由于我喜欢接触很东西，所以给我安排了个专门研究新技术的项目经理，我觉得蛮好的，第一天认识那个项目经理（老陈），下班了通过QQ就聊了2个小时多，聊开了就熟悉了，感觉非常搭，老陈也给我推荐了一些运维方面的东西，我记录了，不一定马上有时间做的事，我通常都是用印象笔记记下来。 高效时间 高效管理时间，我的实践是自律，一种习惯的培养过程。早上6点多起来看Python书，因为Python是自动化运维必备，看到8.15出门，路上刷新闻或者闭目休息会（我的视力好像没有5.2了），上班有空就看看PDF，最近看ansible，下班路上刷新闻或者看游戏视频放松，吃完饭回去7点多，困的话就睡到9点起来学习Python，不困就直接看书玩电脑，一般到11点多就休息了，不熬夜不躺床玩手机，对我来说，睡觉前玩手机基本上是无意义浪费时间，熬夜学习还不如早起学习，比较喜欢高效学习时间，周末早上6点起床跑步，跑完步洗个澡做个早餐吃完开始学习，这就是我现在的时间安排，坚持一段时间，3分钟热度过去后，习惯这种作息时间，做事效率也提高不少。 博客之路 偶然一次刷新闻，看到一个号主的故事，很有共鸣和励志，就加了微信聊了好多，通过老大哥的群，看到好多厉害的人，非常棒的感觉，除了微信群现在QQ群也加了几个，偶尔问问题或者解答别人的问题，看看别人走过的坑，分享的新技术，感觉还不错，最近着手准备博客，一直以来都想写博客，网上教程可用性太差了，自己写可以记录自己的心得，以及以后忘了可以找回来，通过写博客我能理解各个公众号文章背后的付出，从内容，逻辑，排版等等，真的要花很大的心思，为你们的努力点赞，维护好公众号和博客都是很花时间的，但是我写博客只是为了记录学习经验，没有想推广这些，就没有去做推广了，SEO这些也很花时间，所以现在博客只能推广链接访问，网上找不到的，嘻嘻，我以后写博客基本上会记录我的心得，这是网上文章基本上不会有的，算是给自己用的，现在接触的东西多了，视野广阔之后，更多新世界发现，以前的东西很容易忘记，既然用博客来记录当然要写好些，心得这些也要记录，免得我以后都忘了。 现在的感受规律的作息让我效率提高不少，接触的事物越多，觉得时间越来越少，所以我常常对自己说，你没有剩下可以浪费的时间了，尤其是懒惰的时候会想起，现在的职业技能掌握不多，很多只是初级了解，而且并不全面，所以以后要学的很多，python是自动化运维必不可少的，而且掌握一门开发语言对职业发展帮助很大，可以贯通很多方面知识，形成一个整体，所以现在天天学python，通过新闻也了解很多新技术，无论怎样python是要一直坚持的，最近买了极客时间APP上的一些讲座课程，尝试快餐式学习，毕竟很多时候自己学，通过业界大咖可以更容易了解上手，虽然我一直看PDF，视频虽然效果好，但是太花时间，而且全程下来必须高度集中精神，看书我也能理解，速度更快，这里说一下看书的感想，很多了解一个新事物，跟着书里走，可能效果不太好，应该有个大局观，站在作者的角度了解或许会好很多，流行的技术必然上手不难，至于深入就要看个人了。 想学的技术或者工具数据库：MySQL，Oracle，MongoDB，Redis 网络：打算看极客时间上的一个讲座，我对网络方面的理解差，看书云里雾里的还是不懂，所以我想换一种学习方法，虽然一直都是看书学习，但是效果不好的时候就要考虑变通了 CI/CD，持续集成/交付/部署：自学了Jenkins，gitlab，现在看看极客时间的一个讲座，全面了解一下，看看业界大咖是怎么理解的。 自动化管理：ansible，（saltstack复杂一些，而且没那么多时间精力学同类的） 监控：zabbix，Prometheus，falcon-plus（小米开源） 虚拟化：docker，k8s CMDB：jumpserver，adminset python应用方向：爬虫，运维脚本，web，（大数据，深度学习，AI）这些是智能运维的，也是所有的运维最理想的情况，以后到了那个层次再学习吧，哈哈先把全面的学了再说 暂时记录这些吧，把接触的想了想，大概就这些。]]></content>
      <categories>
        <category>个人</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
</search>
